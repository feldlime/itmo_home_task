name: Test

on: [push]

jobs:
  run_tests:
    runs-on: ubuntu-20.04
    env:
      DB_URL: postgresql://user:pass@127.0.0.1:5432/db
      GS_URL: ${{ secrets.GS_URL }}
      GS_CREDENTIALS: ${{ secrets.GS_CREDENTIALS }}
      GS_GLOBAL_LEADERBOARD_PAGE_NAME: Global
      GS_GLOBAL_LEADERBOARD_PAGE_MAX_ROWS: 1000
      GS_BY_MODEL_LEADERBOARD_PAGE_NAME: By_model
      GS_BY_MODEL_LEADERBOARD_PAGE_MAX_ROWS: 3000
      BOT_TOKEN: BOT_TOKEN
      BOT_NAME: BOT_NAME
      WEBHOOK_HOST: some_host
      PORT: 1111
      RUN_MIGRATIONS: FALSE
      S3_ENDPOINT_URL: ${{ secrets.S3_ENDPOINT_URL }}
      S3_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
      S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
      S3_REGION: ${{ secrets.S3_REGION }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      S3_KEY: ${{ secrets.S3_KEY }}

    services:

      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: db
          POSTGRES_USER: user
          POSTGRES_PASSWORD: pass
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 2s
          --health-timeout 1s
          --health-retries 10

    steps:
      - uses: actions/checkout@v2
      - name: "Setup python"
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - run: pip install poetry==1.1.15
      - run: make install
      - run: make lint
      - run: make test
